// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseUriUpdated extends ethereum.Event {
  get params(): BaseUriUpdated__Params {
    return new BaseUriUpdated__Params(this);
  }
}

export class BaseUriUpdated__Params {
  _event: BaseUriUpdated;

  constructor(event: BaseUriUpdated) {
    this._event = event;
  }

  get baseUri(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class GotConsent extends ethereum.Event {
  get params(): GotConsent__Params {
    return new GotConsent__Params(this);
  }
}

export class GotConsent__Params {
  _event: GotConsent;

  constructor(event: GotConsent) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get claimId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class HypercertMinterUpdated extends ethereum.Event {
  get params(): HypercertMinterUpdated__Params {
    return new HypercertMinterUpdated__Params(this);
  }
}

export class HypercertMinterUpdated__Params {
  _event: HypercertMinterUpdated;

  constructor(event: HypercertMinterUpdated) {
    this._event = event;
  }

  get hypercertMinter(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get metadata(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SubgraphUpdated extends ethereum.Event {
  get params(): SubgraphUpdated__Params {
    return new SubgraphUpdated__Params(this);
  }
}

export class SubgraphUpdated__Params {
  _event: SubgraphUpdated;

  constructor(event: SubgraphUpdated) {
    this._event = event;
  }

  get endpoint(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawErc20 extends ethereum.Event {
  get params(): WithdrawErc20__Params {
    return new WithdrawErc20__Params(this);
  }
}

export class WithdrawErc20__Params {
  _event: WithdrawErc20;

  constructor(event: WithdrawErc20) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawEther extends ethereum.Event {
  get params(): WithdrawEther__Params {
    return new WithdrawEther__Params(this);
  }
}

export class WithdrawEther__Params {
  _event: WithdrawEther;

  constructor(event: WithdrawEther) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Hyperboard extends ethereum.SmartContract {
  static bind(address: Address): Hyperboard {
    return new Hyperboard("Hyperboard", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseUri(): string {
    let result = super.call("baseUri", "baseUri():(string)", []);

    return result[0].toString();
  }

  try_baseUri(): ethereum.CallResult<string> {
    let result = super.tryCall("baseUri", "baseUri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  consentBasedCertsMapping(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "consentBasedCertsMapping",
      "consentBasedCertsMapping(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_consentBasedCertsMapping(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "consentBasedCertsMapping",
      "consentBasedCertsMapping(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllowListedCerts(tokenId: BigInt): Array<BigInt> {
    let result = super.call(
      "getAllowListedCerts",
      "getAllowListedCerts(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigIntArray();
  }

  try_getAllowListedCerts(tokenId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllowListedCerts",
      "getAllowListedCerts(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hypercertMinter(): Address {
    let result = super.call(
      "hypercertMinter",
      "hypercertMinter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_hypercertMinter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "hypercertMinter",
      "hypercertMinter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(
    to: Address,
    allowlistedClaimIds_: Array<BigInt>,
    metadata_: string
  ): BigInt {
    let result = super.call(
      "mint",
      "mint(address,uint256[],string):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigIntArray(allowlistedClaimIds_),
        ethereum.Value.fromString(metadata_)
      ]
    );

    return result[0].toBigInt();
  }

  try_mint(
    to: Address,
    allowlistedClaimIds_: Array<BigInt>,
    metadata_: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(address,uint256[],string):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigIntArray(allowlistedClaimIds_),
        ethereum.Value.fromString(metadata_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subgraphEndpoint(): string {
    let result = super.call(
      "subgraphEndpoint",
      "subgraphEndpoint():(string)",
      []
    );

    return result[0].toString();
  }

  try_subgraphEndpoint(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "subgraphEndpoint",
      "subgraphEndpoint():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get hypercertMinter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get subgraphEndpoint_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get baseUri_(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ConsentForHyperboardCall extends ethereum.Call {
  get inputs(): ConsentForHyperboardCall__Inputs {
    return new ConsentForHyperboardCall__Inputs(this);
  }

  get outputs(): ConsentForHyperboardCall__Outputs {
    return new ConsentForHyperboardCall__Outputs(this);
  }
}

export class ConsentForHyperboardCall__Inputs {
  _call: ConsentForHyperboardCall;

  constructor(call: ConsentForHyperboardCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claimId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConsentForHyperboardCall__Outputs {
  _call: ConsentForHyperboardCall;

  constructor(call: ConsentForHyperboardCall) {
    this._call = call;
  }
}

export class ConsentForHyperboardWithSignatureCall extends ethereum.Call {
  get inputs(): ConsentForHyperboardWithSignatureCall__Inputs {
    return new ConsentForHyperboardWithSignatureCall__Inputs(this);
  }

  get outputs(): ConsentForHyperboardWithSignatureCall__Outputs {
    return new ConsentForHyperboardWithSignatureCall__Outputs(this);
  }
}

export class ConsentForHyperboardWithSignatureCall__Inputs {
  _call: ConsentForHyperboardWithSignatureCall;

  constructor(call: ConsentForHyperboardWithSignatureCall) {
    this._call = call;
  }
}

export class ConsentForHyperboardWithSignatureCall__Outputs {
  _call: ConsentForHyperboardWithSignatureCall;

  constructor(call: ConsentForHyperboardWithSignatureCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowlistedClaimIds_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get metadata_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseUriCall extends ethereum.Call {
  get inputs(): SetBaseUriCall__Inputs {
    return new SetBaseUriCall__Inputs(this);
  }

  get outputs(): SetBaseUriCall__Outputs {
    return new SetBaseUriCall__Outputs(this);
  }
}

export class SetBaseUriCall__Inputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }

  get baseUri_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseUriCall__Outputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }
}

export class SetHypercertContractCall extends ethereum.Call {
  get inputs(): SetHypercertContractCall__Inputs {
    return new SetHypercertContractCall__Inputs(this);
  }

  get outputs(): SetHypercertContractCall__Outputs {
    return new SetHypercertContractCall__Outputs(this);
  }
}

export class SetHypercertContractCall__Inputs {
  _call: SetHypercertContractCall;

  constructor(call: SetHypercertContractCall) {
    this._call = call;
  }

  get hypercertMinter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHypercertContractCall__Outputs {
  _call: SetHypercertContractCall;

  constructor(call: SetHypercertContractCall) {
    this._call = call;
  }
}

export class SetSubgraphEndpointCall extends ethereum.Call {
  get inputs(): SetSubgraphEndpointCall__Inputs {
    return new SetSubgraphEndpointCall__Inputs(this);
  }

  get outputs(): SetSubgraphEndpointCall__Outputs {
    return new SetSubgraphEndpointCall__Outputs(this);
  }
}

export class SetSubgraphEndpointCall__Inputs {
  _call: SetSubgraphEndpointCall;

  constructor(call: SetSubgraphEndpointCall) {
    this._call = call;
  }

  get endpoint_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetSubgraphEndpointCall__Outputs {
  _call: SetSubgraphEndpointCall;

  constructor(call: SetSubgraphEndpointCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAllowListedCertsCall extends ethereum.Call {
  get inputs(): UpdateAllowListedCertsCall__Inputs {
    return new UpdateAllowListedCertsCall__Inputs(this);
  }

  get outputs(): UpdateAllowListedCertsCall__Outputs {
    return new UpdateAllowListedCertsCall__Outputs(this);
  }
}

export class UpdateAllowListedCertsCall__Inputs {
  _call: UpdateAllowListedCertsCall;

  constructor(call: UpdateAllowListedCertsCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get allowlistedClaimIds_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateAllowListedCertsCall__Outputs {
  _call: UpdateAllowListedCertsCall;

  constructor(call: UpdateAllowListedCertsCall) {
    this._call = call;
  }
}

export class WithdrawErc20Call extends ethereum.Call {
  get inputs(): WithdrawErc20Call__Inputs {
    return new WithdrawErc20Call__Inputs(this);
  }

  get outputs(): WithdrawErc20Call__Outputs {
    return new WithdrawErc20Call__Outputs(this);
  }
}

export class WithdrawErc20Call__Inputs {
  _call: WithdrawErc20Call;

  constructor(call: WithdrawErc20Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawErc20Call__Outputs {
  _call: WithdrawErc20Call;

  constructor(call: WithdrawErc20Call) {
    this._call = call;
  }
}

export class WithdrawEtherCall extends ethereum.Call {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}
